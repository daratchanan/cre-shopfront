[{"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\index.js":"1","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\App.js":"2","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\reportWebVitals.js":"3","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Home\\Home.js":"4","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Login\\Login.js":"5","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Register\\Register.js":"6","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductItem\\ProductItem.js":"7","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductCard\\ProductCard.js":"8","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\InputProduct\\InputProduct.js":"9","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\Navbar\\Navbar.js":"10","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Cart\\Cart.js":"11","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\services\\localStorage.js":"12","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\UserContext.js":"13","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\PrivateRoutes\\PrivateRoutes.js":"14","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\roles.js":"15","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\NotFound\\NotFound.js":"16","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\axios.js":"17","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\constants.js":"18"},{"size":544,"mtime":1608275219805,"results":"19","hashOfConfig":"20"},{"size":574,"mtime":1608460053234,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":301,"mtime":1608347954068,"results":"23","hashOfConfig":"20"},{"size":5234,"mtime":1608460765237,"results":"24","hashOfConfig":"20"},{"size":6143,"mtime":1608283267866,"results":"25","hashOfConfig":"20"},{"size":1250,"mtime":1608460373431,"results":"26","hashOfConfig":"20"},{"size":2444,"mtime":1608460153832,"results":"27","hashOfConfig":"20"},{"size":7071,"mtime":1608384592781,"results":"28","hashOfConfig":"20"},{"size":5304,"mtime":1608461130548,"results":"29","hashOfConfig":"20"},{"size":15552,"mtime":1608187837773,"results":"30","hashOfConfig":"20"},{"size":436,"mtime":1608275798600,"results":"31","hashOfConfig":"20"},{"size":109,"mtime":1608263003255,"results":"32","hashOfConfig":"20"},{"size":605,"mtime":1608281243504,"results":"33","hashOfConfig":"20"},{"size":1022,"mtime":1608357064424,"results":"34","hashOfConfig":"20"},{"size":153,"mtime":1608275991807,"results":"35","hashOfConfig":"20"},{"size":1141,"mtime":1608274956387,"results":"36","hashOfConfig":"20"},{"size":56,"mtime":1608271388187,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1bz8hlp",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\index.js",[],["78","79"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\App.js",["80","81"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\reportWebVitals.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Home\\Home.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Login\\Login.js",["82"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Register\\Register.js",["83"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from '../../../config/axios';\r\nimport LocalStorageService from \"../../../services/localStorage\"\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nfunction Copyright() {\r\n   return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n         {'Copyright Â© '}\r\n         <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Natty Website\r\n      </Link>{' '}\r\n         {new Date().getFullYear()}\r\n         {'.'}\r\n      </Typography>\r\n   );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n   },\r\n   avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n   },\r\n   form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n   },\r\n   submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n   },\r\n}));\r\n\r\nfunction Register(props) {\r\n   const classes = useStyles();\r\n\r\n   const [firstname, setFirstName] = useState(\"\");\r\n   const [lastname, setLastName] = useState(\"\");\r\n   const [email, setEmail] = useState(\"\");\r\n   const [password, setPassword] = useState(\"\");\r\n   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n   const firstNameHandle = (event) => {\r\n      setFirstName(event.target.value);\r\n   };\r\n\r\n   const lastNameHandle = (event) => {\r\n      setLastName(event.target.value);\r\n   };\r\n\r\n   const emailHandle = (event) => {\r\n      setEmail(event.target.value);\r\n   };\r\n\r\n   const passwordHandle = (event) => {\r\n      setPassword(event.target.value);\r\n   };\r\n\r\n   const onFinish = async (event) => {\r\n      event.preventDefault();\r\n\r\n      await axios.post(\"/users/register\", { firstname, lastname, email, password })\r\n\r\n         .then(async (res) => {\r\n            alert(\"Register successfully.\")\r\n            LocalStorageService.setToken(res.data.token);\r\n            props.setRole(\"USER\");\r\n            props.history.push(\"/\");\r\n         })\r\n         .catch(err => {\r\n            console.log(err);\r\n            alert(\"Something went wrong.........\")\r\n         });\r\n   };\r\n\r\n\r\n   return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n         <CssBaseline />\r\n         <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n               <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n               Register\r\n        </Typography>\r\n            <form className={classes.form} noValidate onSubmit={onFinish}>\r\n               <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                     <TextField\r\n                        autoComplete=\"fname\"\r\n                        name=\"firstName\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        autoFocus\r\n                        onChange={firstNameHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        autoComplete=\"lname\"\r\n                        onChange={lastNameHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        onChange={emailHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={passwordHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Confirm Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={confirmPassword}\r\n                     />\r\n                  </Grid>\r\n\r\n               </Grid>\r\n               <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n               >\r\n                  Register\r\n          </Button>\r\n\r\n            </form>\r\n         </div>\r\n         <Box mt={5}>\r\n            <Copyright />\r\n         </Box>\r\n      </Container>\r\n   );\r\n}\r\n\r\nexport default withRouter(Register);","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductItem\\ProductItem.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductCard\\ProductCard.js",["84"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\InputProduct\\InputProduct.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\Navbar\\Navbar.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Cart\\Cart.js",["85","86","87"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, Divider, Grid, TextField } from '@material-ui/core';\r\n\r\n\r\nfunction createData(name, detail, price, qty) {\r\n   return { name, detail, price, qty };\r\n}\r\n\r\nconst rows = [\r\n   createData(0, 'WALL AIR CONDITIONER MITSUBISHI MSY-JS13VF 12283BTU INVERTER',\r\n      24600, 3),\r\n   createData(1, 'TATAMI FAN HATARI HT-S16R2 16\" WHITE', 1290, 2),\r\n   createData(2, 'TATAMI FAN HATARI HT-S16R2 16\" WHITE', 1290, 2)\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n   if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n   }\r\n   if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n   }\r\n   return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n   return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n   const stabilizedThis = array.map((el, index) => [el, index]);\r\n   stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n   });\r\n   return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n   { id: 'img', numeric: false, disablePadding: false, label: '' },\r\n   { id: 'detail', numeric: false, disablePadding: false, label: '' },\r\n   { id: 'p', numeric: true, disablePadding: false, label: '' },\r\n   { id: 'qty', numeric: true, disablePadding: false, label: '' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n   const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n   };\r\n\r\n   return (\r\n      <TableHead>\r\n         <TableRow>\r\n            <TableCell padding=\"checkbox\">\r\n               <Checkbox\r\n                  indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                  checked={rowCount > 0 && numSelected === rowCount}\r\n                  onChange={onSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n               />\r\n            </TableCell>\r\n            {headCells.map((headCell) => (\r\n               <TableCell\r\n                  key={headCell.id}\r\n                  align={headCell.numeric ? 'right' : 'left'}\r\n                  padding={headCell.disablePadding ? 'none' : 'default'}\r\n                  sortDirection={orderBy === headCell.id ? order : false}\r\n               >\r\n                  <TableSortLabel\r\n                     active={orderBy === headCell.id}\r\n                     direction={orderBy === headCell.id ? order : 'asc'}\r\n                     onClick={createSortHandler(headCell.id)}\r\n                  >\r\n                     {headCell.label}\r\n                     {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                           {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                        </span>\r\n                     ) : null}\r\n                  </TableSortLabel>\r\n               </TableCell>\r\n            ))}\r\n         </TableRow>\r\n      </TableHead>\r\n   );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n   classes: PropTypes.object.isRequired,\r\n   numSelected: PropTypes.number.isRequired,\r\n   onRequestSort: PropTypes.func.isRequired,\r\n   onSelectAllClick: PropTypes.func.isRequired,\r\n   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n   orderBy: PropTypes.string.isRequired,\r\n   rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n   root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n   },\r\n   highlight:\r\n      theme.palette.type === 'light'\r\n         ? {\r\n            color: theme.palette.secondary.main,\r\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n         }\r\n         : {\r\n            color: theme.palette.text.primary,\r\n            backgroundColor: theme.palette.secondary.dark,\r\n         },\r\n   title: {\r\n      flex: '1 1 100%',\r\n   },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n   const classes = useToolbarStyles();\r\n   const { numSelected } = props;\r\n\r\n   return (\r\n      <Toolbar\r\n         className={clsx(classes.root, {\r\n            [classes.highlight]: numSelected > 0,\r\n         })}\r\n      >\r\n         {numSelected > 0 ? (\r\n            <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n               {numSelected} selected\r\n            </Typography>\r\n         ) : (\r\n               <Typography className={classes.title} variant=\"h5\" id=\"tableTitle\" component=\"div\">\r\n                  Your cart\r\n               </Typography>\r\n            )}\r\n\r\n         {numSelected > 0 ? (\r\n            <Tooltip title=\"Delete\">\r\n               <IconButton aria-label=\"delete\">\r\n                  <DeleteIcon />\r\n               </IconButton>\r\n            </Tooltip>\r\n         ) : (\r\n               <Tooltip title=\"Filter list\">\r\n                  <IconButton aria-label=\"filter list\">\r\n                     <FilterListIcon />\r\n                  </IconButton>\r\n               </Tooltip>\r\n            )}\r\n      </Toolbar>\r\n   );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n   numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      width: '100%',\r\n   },\r\n   paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   table: {\r\n      minWidth: 750,\r\n   },\r\n   visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n   },\r\n}));\r\n\r\nexport default function Cart() {\r\n   const classes = useStyles();\r\n   const [order, setOrder] = React.useState('asc');\r\n   const [orderBy, setOrderBy] = React.useState('calories');\r\n   const [selected, setSelected] = React.useState([]);\r\n   const [page, setPage] = React.useState(0);\r\n   const [dense, setDense] = React.useState(false);\r\n   const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n   const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc';\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n   };\r\n\r\n   const handleSelectAllClick = (event) => {\r\n      if (event.target.checked) {\r\n         const newSelecteds = rows.map((n) => n.name);\r\n         setSelected(newSelecteds);\r\n         return;\r\n      }\r\n      setSelected([]);\r\n   };\r\n\r\n   const handleClick = (event, name) => {\r\n      const selectedIndex = selected.indexOf(name);\r\n      let newSelected = [];\r\n\r\n      if (selectedIndex === -1) {\r\n         newSelected = newSelected.concat(selected, name);\r\n      } else if (selectedIndex === 0) {\r\n         newSelected = newSelected.concat(selected.slice(1));\r\n      } else if (selectedIndex === selected.length - 1) {\r\n         newSelected = newSelected.concat(selected.slice(0, -1));\r\n      } else if (selectedIndex > 0) {\r\n         newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n         );\r\n      }\r\n\r\n      setSelected(newSelected);\r\n   };\r\n\r\n   const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n   };\r\n\r\n   const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 10));\r\n      setPage(0);\r\n   };\r\n\r\n\r\n   const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n   const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n   return (\r\n      <Container maxWidth=\"xl\" className={classes.root}>\r\n         <Grid container spacing={3} >\r\n            <Grid item md={9} >\r\n               <Paper className={classes.paper} >\r\n                  <EnhancedTableToolbar numSelected={selected.length} />\r\n                  <TableContainer>\r\n                     <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                     >\r\n                        <EnhancedTableHead\r\n                           classes={classes}\r\n                           numSelected={selected.length}\r\n                           order={order}\r\n                           orderBy={orderBy}\r\n                           onSelectAllClick={handleSelectAllClick}\r\n                           onRequestSort={handleRequestSort}\r\n                           rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                           {stableSort(rows, getComparator(order, orderBy))\r\n                              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                              .map((row, index) => {\r\n                                 const isItemSelected = isSelected(row.name);\r\n                                 const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                 return (\r\n                                    <TableRow\r\n                                       hover\r\n                                       // onClick={(event) => handleClick(event, row.name)}\r\n                                       role=\"checkbox\"\r\n                                       aria-checked={isItemSelected}\r\n                                       tabIndex={-1}\r\n                                       key={row.name}\r\n                                       selected={isItemSelected}\r\n                                    >\r\n                                       <TableCell padding=\"checkbox\">\r\n                                          <Checkbox\r\n                                             checked={isItemSelected}\r\n                                             inputProps={{ 'aria-labelledby': labelId }}\r\n                                             onClick={(event) => handleClick(event, row.name)}\r\n                                          />\r\n                                       </TableCell>\r\n                                       <TableCell >\r\n                                          <img\r\n                                             src={\"https://source.unsplash.com/random\"}\r\n                                             width={\"100px\"}\r\n                                             height={\"100px\"}\r\n                                          />\r\n                                       </TableCell>\r\n                                       <TableCell align=\"left\">{row.detail}</TableCell>\r\n                                       <TableCell align=\"left\">{row.price}</TableCell>\r\n\r\n                                       <TableCell align=\"left\">\r\n                                          <TextField\r\n                                             id=\"outlined-number\"\r\n                                             // label=\"Number\"\r\n                                             type=\"number\"\r\n                                             InputLabelProps={{\r\n                                                shrink: true,\r\n                                             }}\r\n                                             variant=\"outlined\"\r\n                                             defaultValue=\"1\"\r\n                                          />\r\n                                       </TableCell>\r\n                                    </TableRow>\r\n                                 );\r\n                              })}\r\n                           {/* {emptyRows > 0 && (\r\n                        <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                           <TableCell colSpan={6} />\r\n                        </TableRow>\r\n                     )} */}\r\n                        </TableBody>\r\n                     </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                     rowsPerPageOptions={[5, 10, 25]}\r\n                     component=\"div\"\r\n                     count={rows.length}\r\n                     rowsPerPage={rowsPerPage}\r\n                     page={page}\r\n                     onChangePage={handleChangePage}\r\n                     onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                  />\r\n               </Paper>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n               <Paper className={classes.paper}>\r\n                  <Typography variant=\"h5\" gutterBottom style={{marginBottom:\"20px\"}}>\r\n                     Cart summary\r\n                  </Typography>\r\n                  <Grid container>\r\n                     <Grid item md={9}>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                           Temporary amount\r\n                        </Typography>\r\n                     </Grid>\r\n                     <Grid item md={3}>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                           45000\r\n                        </Typography>\r\n                     </Grid>\r\n                  </Grid>\r\n                  <Grid container>\r\n                     <Grid item md={9}>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                           Shipping\r\n                        </Typography>\r\n                     </Grid>\r\n                     <Grid item md={3}>\r\n                     <Grid container justify=\"space-around\" style={{paddingBottom:\"20px\"}}>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                           200\r\n                        </Typography>\r\n                     </Grid>\r\n                     </Grid>\r\n                  </Grid>\r\n\r\n                  <Divider />\r\n                  <Grid container style={{padding:\"20px 0\"}}>\r\n                     <Grid item md={9} >\r\n                        <Typography variant=\"h6\" gutterBottom >\r\n                           The total amound of\r\n                        </Typography>\r\n                     </Grid>\r\n                     <Grid item md={3}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                           45200\r\n                        </Typography>\r\n                     </Grid>\r\n                  </Grid>\r\n                  <Button variant=\"contained\" color=\"primary\" fullWidth>\r\n                     GO TO CHECKOUT\r\n                     </Button>\r\n\r\n\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n      </Container>\r\n   );\r\n}\r\n","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\services\\localStorage.js",["88"],"const getToken = () => {\r\n   return localStorage.getItem(\"ACCESS_TOKEN\");\r\n};\r\n\r\nconst setToken = (token) => {\r\n   localStorage.setItem(\"ACCESS_TOKEN\", token);\r\n};\r\n\r\n\r\nconst clearToken = () => {\r\n   localStorage.clear();\r\n};\r\n\r\nconst getRole = () => {\r\n   const token = getToken()\r\n   if (token) {\r\n      return \"USER\";\r\n   };\r\n   return \"GUEST\";\r\n};\r\n\r\n\r\nexport default {\r\n   getToken,\r\n   setToken,\r\n   clearToken,\r\n   getRole,\r\n};\r\n","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\UserContext.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\PrivateRoutes\\PrivateRoutes.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\roles.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\NotFound\\NotFound.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\axios.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\constants.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":11,"column":11,"nodeType":"95","messageId":"96","endLine":11,"endColumn":17},{"ruleId":"93","severity":1,"message":"97","line":11,"column":19,"nodeType":"95","messageId":"96","endLine":11,"endColumn":28},{"ruleId":"93","severity":1,"message":"98","line":55,"column":12,"nodeType":"95","messageId":"96","endLine":55,"endColumn":16},{"ruleId":"93","severity":1,"message":"99","line":58,"column":28,"nodeType":"95","messageId":"96","endLine":58,"endColumn":46},{"ruleId":"93","severity":1,"message":"100","line":11,"column":10,"nodeType":"95","messageId":"96","endLine":11,"endColumn":20},{"ruleId":"93","severity":1,"message":"101","line":213,"column":18,"nodeType":"95","messageId":"96","endLine":213,"endColumn":26},{"ruleId":"93","severity":1,"message":"102","line":263,"column":10,"nodeType":"95","messageId":"96","endLine":263,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":312,"column":43,"nodeType":"105","endLine":316,"endColumn":45},{"ruleId":"106","severity":1,"message":"107","line":23,"column":1,"nodeType":"108","endLine":28,"endColumn":3},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","'setUserId' is assigned a value but never used.","'role' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'useHistory' is defined but never used.","'setDense' is assigned a value but never used.","'emptyRows' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]