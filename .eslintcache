[{"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\index.js":"1","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\App.js":"2","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\reportWebVitals.js":"3","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Home\\Home.js":"4","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Login\\Login.js":"5","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Register\\Register.js":"6","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductCard\\ProductCard.js":"7","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\InputProduct\\InputProduct.js":"8","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\Navbar\\Navbar.js":"9","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Cart\\Cart.js":"10","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\services\\localStorage.js":"11","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\UserContext.js":"12","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\PrivateRoutes\\PrivateRoutes.js":"13","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\roles.js":"14","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\NotFound\\NotFound.js":"15","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\axios.js":"16","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\constants.js":"17","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\TopProduct\\TopProduct.js":"18","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\AllProduct\\AllProduct.js":"19","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\DataContext.js":"20"},{"size":544,"mtime":1608275219805,"results":"21","hashOfConfig":"22"},{"size":789,"mtime":1610007231714,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":391,"mtime":1609923212039,"results":"25","hashOfConfig":"22"},{"size":5250,"mtime":1608518884969,"results":"26","hashOfConfig":"22"},{"size":6143,"mtime":1608283267866,"results":"27","hashOfConfig":"22"},{"size":2557,"mtime":1609921867563,"results":"28","hashOfConfig":"22"},{"size":7066,"mtime":1608525499038,"results":"29","hashOfConfig":"22"},{"size":6170,"mtime":1610007994247,"results":"30","hashOfConfig":"22"},{"size":16010,"mtime":1608623546840,"results":"31","hashOfConfig":"22"},{"size":617,"mtime":1608519947539,"results":"32","hashOfConfig":"22"},{"size":109,"mtime":1608263003255,"results":"33","hashOfConfig":"22"},{"size":605,"mtime":1608281243504,"results":"34","hashOfConfig":"22"},{"size":1022,"mtime":1608357064424,"results":"35","hashOfConfig":"22"},{"size":153,"mtime":1608275991807,"results":"36","hashOfConfig":"22"},{"size":1141,"mtime":1608274956387,"results":"37","hashOfConfig":"22"},{"size":56,"mtime":1608271388187,"results":"38","hashOfConfig":"22"},{"size":1616,"mtime":1609923329604,"results":"39","hashOfConfig":"22"},{"size":1868,"mtime":1610007451036,"results":"40","hashOfConfig":"22"},{"size":109,"mtime":1609931328740,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1bz8hlp",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\index.js",[],["88","89"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\App.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\reportWebVitals.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Home\\Home.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Login\\Login.js",["90"],"import React, { useContext, useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserContext from '../../../context/UserContext';\r\nimport LocalStorageService from \"../../../services/localStorage\"\r\nimport axios from '../../../config/axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Copyright() {\r\n   return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n         {'Copyright Â© '}\r\n         <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Natty Website\r\n      </Link>{' '}\r\n         {new Date().getFullYear()}\r\n         {'.'}\r\n      </Typography>\r\n   );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n   },\r\n   avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n   },\r\n   form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n   },\r\n   submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n   },\r\n}));\r\n\r\n\r\nexport default function Login() {\r\n   const { role , setRole} = useContext(UserContext)\r\n   const classes = useStyles();\r\n   // const { register, handleSubmit } = useForm();\r\n\r\n   // const { setChange } = useContext(UserContext)\r\n\r\n   const history = useHistory();\r\n\r\n   const [email, setEmail] = useState(\"\");\r\n   const [password, setPassword] = useState(\"\");\r\n\r\n   const emailHandler = (even) => {\r\n      setEmail(even.target.value);\r\n   };\r\n\r\n   const passwordHandler = (even) => {\r\n      setPassword(even.target.value);\r\n   };\r\n\r\n   const handleRegister = () => {\r\n      history.push(\"/register\");\r\n   };\r\n\r\n   const onFinish = (event) => {\r\n      event.preventDefault();\r\n\r\n      axios.post(\"/users/login\", { email, password })\r\n         .then(res => {\r\n            alert(\"Login success.\")\r\n            LocalStorageService.setToken(res.data.token);\r\n            setRole(LocalStorageService.getRole());\r\n            // setUser(jwtDecode(res.data.token));\r\n            // setChange(true);\r\n            history.push('/');\r\n         })\r\n         .catch(err => {\r\n            alert(\"Login failed\")\r\n         });\r\n   };\r\n\r\n   return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n         <CssBaseline />\r\n         <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n               <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n               Login\r\n        </Typography>\r\n            <form className={classes.form} noValidate onSubmit={onFinish}>\r\n               <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"              \r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  autoFocus\r\n                  onChange={emailHandler}\r\n               />\r\n               <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  onChange={passwordHandler}\r\n               />\r\n               <FormControlLabel\r\n                  control={<Checkbox\r\n                     name=\"remember\"\r\n                     color=\"primary\"\r\n                     defaultValue={false}\r\n                  />}\r\n                  label=\"Remember me\"\r\n               />\r\n               <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n               >\r\n                  Login\r\n          </Button>\r\n               <Grid container>\r\n                  <Grid item xs>\r\n                     <Link href=\"#\" variant=\"body2\">\r\n                        Forgot password?\r\n              </Link>\r\n                  </Grid>\r\n                  <Grid item>\r\n                     <Link href=\"#\" variant=\"body2\" onClick={handleRegister}>\r\n                        {\"Don't have an account? Register\"}\r\n                     </Link>\r\n                  </Grid>\r\n               </Grid>\r\n            </form>\r\n         </div>\r\n         <Box mt={8}>\r\n            <Copyright />\r\n         </Box>\r\n      </Container>\r\n   );\r\n}","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Register\\Register.js",["91"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from '../../../config/axios';\r\nimport LocalStorageService from \"../../../services/localStorage\"\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nfunction Copyright() {\r\n   return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n         {'Copyright Â© '}\r\n         <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Natty Website\r\n      </Link>{' '}\r\n         {new Date().getFullYear()}\r\n         {'.'}\r\n      </Typography>\r\n   );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n   },\r\n   avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n   },\r\n   form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n   },\r\n   submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n   },\r\n}));\r\n\r\nfunction Register(props) {\r\n   const classes = useStyles();\r\n\r\n   const [firstname, setFirstName] = useState(\"\");\r\n   const [lastname, setLastName] = useState(\"\");\r\n   const [email, setEmail] = useState(\"\");\r\n   const [password, setPassword] = useState(\"\");\r\n   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n   const firstNameHandle = (event) => {\r\n      setFirstName(event.target.value);\r\n   };\r\n\r\n   const lastNameHandle = (event) => {\r\n      setLastName(event.target.value);\r\n   };\r\n\r\n   const emailHandle = (event) => {\r\n      setEmail(event.target.value);\r\n   };\r\n\r\n   const passwordHandle = (event) => {\r\n      setPassword(event.target.value);\r\n   };\r\n\r\n   const onFinish = async (event) => {\r\n      event.preventDefault();\r\n\r\n      await axios.post(\"/users/register\", { firstname, lastname, email, password })\r\n\r\n         .then(async (res) => {\r\n            alert(\"Register successfully.\")\r\n            LocalStorageService.setToken(res.data.token);\r\n            props.setRole(\"USER\");\r\n            props.history.push(\"/\");\r\n         })\r\n         .catch(err => {\r\n            console.log(err);\r\n            alert(\"Something went wrong.........\")\r\n         });\r\n   };\r\n\r\n\r\n   return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n         <CssBaseline />\r\n         <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n               <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n               Register\r\n        </Typography>\r\n            <form className={classes.form} noValidate onSubmit={onFinish}>\r\n               <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                     <TextField\r\n                        autoComplete=\"fname\"\r\n                        name=\"firstName\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        autoFocus\r\n                        onChange={firstNameHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        autoComplete=\"lname\"\r\n                        onChange={lastNameHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        onChange={emailHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={passwordHandle}\r\n                     />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                     <TextField\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Confirm Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={confirmPassword}\r\n                     />\r\n                  </Grid>\r\n\r\n               </Grid>\r\n               <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n               >\r\n                  Register\r\n          </Button>\r\n\r\n            </form>\r\n         </div>\r\n         <Box mt={5}>\r\n            <Copyright />\r\n         </Box>\r\n      </Container>\r\n   );\r\n}\r\n\r\nexport default withRouter(Register);","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\ProductCard\\ProductCard.js",["92","93","94","95"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport UserContext from '../../context/UserContext';\r\nimport axios from '../../config/axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n      maxWidth: 345,\r\n      height: '400px'\r\n   },\r\n   productName: {\r\n      height: \"50px\",\r\n      overflow: \"hidden\",\r\n      // border: \"2px solid red\"\r\n   },\r\n   productDes: {\r\n      height: \"60px\",\r\n      overflow: \"hidden\",\r\n   },\r\n   action: {\r\n      marginBottom: \"10px\",\r\n      padding: \"0 10px\",\r\n      textAlign: \"center\"\r\n   },\r\n   btnAdd: {\r\n      padding: \"10px\"\r\n   },\r\n}));\r\n\r\nexport default function ProductCard({ price, description, productName, img, productId }) {\r\n   const classes = useStyles();\r\n   const { user } = useContext(UserContext);\r\n\r\n   const addCart = async () => {\r\n      const item = { quantity: 1, product_id: productId, user_id: user.id }\r\n      await axios.post(\"/cartItems\", item);\r\n      alert('add to cart');\r\n   };\r\n\r\n\r\n   return (\r\n\r\n      <Card className={classes.root}>\r\n\r\n         <CardMedia\r\n            component=\"img\"\r\n            alt=\"electrical appliance picture\"\r\n            image={img}\r\n         />\r\n         <CardContent>\r\n            <Typography\r\n               variant=\"subtitle1\"\r\n               gutterBottom\r\n               className={classes.productName}\r\n            >\r\n               {productName}\r\n            </Typography>\r\n            <Typography variant=\"body2\"\r\n               color=\"textSecondary\"\r\n               component=\"p\"\r\n               className={classes.productDes}\r\n            >\r\n               {description}\r\n            </Typography>\r\n         </CardContent>\r\n\r\n         <div className={classes.action}>\r\n            <Typography variant=\"h5\" component=\"p\">\r\n               {new Intl.NumberFormat().format(price) + \" Baht\"}\r\n            </Typography>\r\n\r\n            <Button onClick={addCart} className={classes.btnAdd} variant=\"contained\" color=\"primary\" fullWidth >\r\n               Add to Cart\r\n                  </Button>\r\n         </div>\r\n      </Card>\r\n   );\r\n}\r\n","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\InputProduct\\InputProduct.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\Navbar\\Navbar.js",["96"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\Cart\\Cart.js",["97","98","99"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, Divider, Grid, TextField } from '@material-ui/core';\r\nimport NavBar from '../../../components/Navbar/Navbar';\r\nimport axios from '../../../config/axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n// function createData(name, detail, price, qty) {\r\n//    return { name, detail, price, qty };\r\n// }\r\n\r\n// const rows = [\r\n//    createData(0, 'WALL AIR CONDITIONER MITSUBISHI MSY-JS13VF 12283BTU INVERTER',\r\n//       24600, 3),\r\n//    createData(1, 'TATAMI FAN HATARI HT-S16R2 16\" WHITE', 1290, 2),\r\n//    createData(2, 'TATAMI FAN HATARI HT-S16R2 16\" WHITE', 1290, 2)\r\n// ];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'img', numeric: false, disablePadding: false, label: '' },\r\n  { id: 'detail', numeric: false, disablePadding: false, label: '' },\r\n  { id: 'p', numeric: true, disablePadding: false, label: '' },\r\n  { id: 'qty', numeric: true, disablePadding: false, label: '' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, deleteItem } = props;\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n          <Typography className={classes.title} variant=\"h5\" id=\"tableTitle\" component=\"div\">\r\n            Your cart\r\n          </Typography>\r\n        )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon onClick={deleteItem} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n          <Tooltip title=\"Filter list\">\r\n            <IconButton aria-label=\"filter list\">\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: \"20px\"\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function Cart() {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('calories');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const shippingFee = 200;\r\n  const totalCartPrice = cartItems.reduce((accu, item) => {\r\n    return item.quantity * item.Product.price + accu;\r\n  }, 0)\r\n\r\n\r\n  const fetchCart = () => {\r\n    axios.get(\"/cartItems\")\r\n      .then(async (res) => {\r\n        setCartItems(res.data.cartItem)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        alert(\"Something went wrong.\")\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchCart()\r\n  }, [])\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = cartItems.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleOrder = (e) => {\r\n\r\n    axios.post(\"/orders\", { total_price: totalCartPrice + shippingFee })\r\n      .then(async (res) => {\r\n        alert(\"Order created\")\r\n        history.push(\"/\");\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        alert(\"Something went wrong.\")\r\n      });\r\n  };\r\n\r\n\r\n  const updateQuantity = (e) => {\r\n    // console.log (e.target.id)\r\n    // console.log(e.target.value)\r\n    axios.put(`/cartItems/${e.target.id}`, {\r\n      quantity: Number(e.target.value)\r\n    })\r\n      .then(async (res) => {\r\n        fetchCart()\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        alert(\"Something went wrong.\")\r\n      });\r\n    fetchCart();\r\n  }\r\n\r\n  const deleteItem = async () => {\r\n    console.log('delete clicked')\r\n    console.log(selected);\r\n\r\n    await Promise.all(selected.map(async (id) =>\r\n      await axios.delete(`/cartItems/${id}`)));\r\n    fetchCart();\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, cartItems.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Container maxWidth=\"xl\" className={classes.root}>\r\n        <Grid container spacing={3} >\r\n          <Grid item md={9} >\r\n            <Paper className={classes.paper} >\r\n              <EnhancedTableToolbar deleteItem={deleteItem} numSelected={selected.length} />\r\n              <TableContainer>\r\n                <Table\r\n                  className={classes.table}\r\n                  aria-labelledby=\"tableTitle\"\r\n                  size={dense ? 'small' : 'medium'}\r\n                  aria-label=\"enhanced table\"\r\n                >\r\n                  <EnhancedTableHead\r\n                    classes={classes}\r\n                    numSelected={selected.length}\r\n                    order={order}\r\n                    orderBy={orderBy}\r\n                    onSelectAllClick={handleSelectAllClick}\r\n                    onRequestSort={handleRequestSort}\r\n                    rowCount={cartItems.length}\r\n                  />\r\n                  <TableBody>\r\n                    {stableSort(cartItems, getComparator(order, orderBy))\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((row, index) => {\r\n                        const isItemSelected = isSelected(row.id);\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            // onClick={(event) => handleClick(event, row.name)}\r\n                            role=\"checkbox\"\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={row.Product.name}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell padding=\"checkbox\">\r\n                              <Checkbox\r\n                                checked={isItemSelected}\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                                onClick={(event) => handleClick(event, row.id)}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell >\r\n                              <img\r\n                                src={row.Product.img}\r\n                                width={\"100px\"}\r\n                                height={\"100px\"}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">{row.Product.name}</TableCell>\r\n                            <TableCell align=\"left\">{row.Product.price}</TableCell>\r\n\r\n                            <TableCell align=\"left\">\r\n                              <TextField\r\n                                id={row.id}\r\n                                //label=\"Number\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                  shrink: true,\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                defaultValue={row.quantity}\r\n                                onChange={updateQuantity}\r\n                              />\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    {/* {emptyRows > 0 && (\r\n                        <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                           <TableCell colSpan={6} />\r\n                        </TableRow>\r\n                     )} */}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={cartItems.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h5\" gutterBottom style={{ marginBottom: \"20px\" }}>\r\n                Cart summary\r\n                  </Typography>\r\n              <Grid container>\r\n                <Grid item md={9}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Temporary amount\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    {totalCartPrice}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container>\r\n                <Grid item md={9}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Shipping\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                  <Grid container justify=\"space-around\" style={{ paddingBottom: \"20px\" }}>\r\n                    <Typography variant=\"body1\" gutterBottom>\r\n                      {shippingFee}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n              <Grid container style={{ padding: \"20px 0\" }}>\r\n                <Grid item md={9} >\r\n                  <Typography variant=\"h6\" gutterBottom >\r\n                    The total amound of\r\n                        </Typography>\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {totalCartPrice + shippingFee}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleOrder}>\r\n                ORDER\r\n              </Button>\r\n\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\services\\localStorage.js",["100"],"import jwtDecode from 'jwt-decode';\r\n\r\nconst getToken = () => {\r\n   return localStorage.getItem(\"ACCESS_TOKEN\");\r\n};\r\n\r\nconst setToken = (token) => {\r\n   localStorage.setItem(\"ACCESS_TOKEN\", token);\r\n};\r\n\r\n\r\nconst clearToken = () => {\r\n   localStorage.clear();\r\n};\r\n\r\nconst getRole = () => {\r\n   const token = getToken()\r\n   if (token) {\r\n      return \"USER\";\r\n   };\r\n   return \"GUEST\";\r\n};\r\n\r\nconst getUser = () => {\r\n   const token = getToken()\r\n   if (token) {\r\n      return jwtDecode(token);\r\n   };\r\n   return null;\r\n}\r\n\r\nexport default {\r\n   getToken,\r\n   setToken,\r\n   clearToken,\r\n   getRole,\r\n   getUser\r\n};\r\n","D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\UserContext.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\PrivateRoutes\\PrivateRoutes.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\roles.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\containers\\pages\\NotFound\\NotFound.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\axios.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\config\\constants.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\TopProduct\\TopProduct.js",[],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\components\\AllProduct\\AllProduct.js",["101"],"D:\\Code camp\\Project\\Personal\\e-commerce\\frontend-e\\src\\context\\DataContext.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":55,"column":12,"nodeType":"108","messageId":"109","endLine":55,"endColumn":16},{"ruleId":"106","severity":1,"message":"110","line":58,"column":28,"nodeType":"108","messageId":"109","endLine":58,"endColumn":46},{"ruleId":"106","severity":1,"message":"111","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":19},{"ruleId":"106","severity":1,"message":"112","line":8,"column":10,"nodeType":"108","messageId":"109","endLine":8,"endColumn":13},{"ruleId":"106","severity":1,"message":"113","line":10,"column":10,"nodeType":"108","messageId":"109","endLine":10,"endColumn":14},{"ruleId":"106","severity":1,"message":"114","line":11,"column":10,"nodeType":"108","messageId":"109","endLine":11,"endColumn":20},{"ruleId":"106","severity":1,"message":"115","line":60,"column":10,"nodeType":"108","messageId":"109","endLine":60,"endColumn":23},{"ruleId":"106","severity":1,"message":"116","line":216,"column":17,"nodeType":"108","messageId":"109","endLine":216,"endColumn":25},{"ruleId":"106","severity":1,"message":"117","line":327,"column":9,"nodeType":"108","messageId":"109","endLine":327,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":378,"column":31,"nodeType":"120","endLine":382,"endColumn":33},{"ruleId":"121","severity":1,"message":"122","line":32,"column":1,"nodeType":"123","endLine":38,"endColumn":3},{"ruleId":"124","severity":1,"message":"125","line":35,"column":7,"nodeType":"126","endLine":35,"endColumn":9,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'role' is assigned a value but never used.","Identifier","unusedVar","'setConfirmPassword' is assigned a value but never used.","'CardActions' is defined but never used.","'red' is defined but never used.","'Grid' is defined but never used.","'useHistory' is defined but never used.","'handleProfile' is assigned a value but never used.","'setDense' is assigned a value but never used.","'emptyRows' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.","ArrayExpression",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [fetchProducts]",{"range":"133","text":"134"},[1058,1060],"[fetchProducts]"]